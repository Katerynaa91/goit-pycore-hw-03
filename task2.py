"""Написати функцію get_numbers_ticket(min, max, quantity), яка генерує набір унікальних випадкових чисел. 
 Функція повертає випадковий набір чисел у межах заданих параметрів:
•	min - мінімальне можливе число у наборі (не менше 1).
•	max - максимальне можливе число у наборі (не більше 1000).
•	quantity - кількість чисел, які потрібно вибрати (значення між min і max).
Всі випадкові числа в наборі повинні бути унікальні. Якщо параметри не відповідають заданим обмеженням, 
функція повертає пустий список."""

from random import randint, choices, sample

"""Варіант 1. Зі списком."""

def get_numbers_ticket(min_num: int, max_num: int, quantity: int) -> list:
    """У якості параметрів функція отримує 3 числа: мінімальне та максимальне значення у наборі 
    та кількість чисел, яку треба отримати в результаті. Функція генерує набір унікальних випадкових чисел
    за допомогою модуля random та повертає список цих чисел. Функція включає перевірку введених параметрів 
    та унікальності отриманого набору. В іншому випадку повертає пустий список. Унікальність перевіряється
    порівнянням отриманого списку з множиною отриманого набору елементів.
    """
    num_lst = []

    if quantity > max_num - min_num + 1 or min_num < 1 or max_num > 1000:
        return []

    for i in range(quantity):
        num = randint(min_num, max_num)
        num_lst.append(num)

    if len(num_lst) != len(set(num_lst)):
        return []
    
    return sorted(num_lst)


print(get_numbers_ticket(1, 100, 6))
print(get_numbers_ticket(1, 20, 3))


#-------------------------------
#"""Варіант 2: З random.choises()

# def get_numbers_ticket(min_num: int, max_num: int, quantity: int) -> list:
    # """У якості параметрів функція отримує 3 числа: мінімальне та максимальне значення у наборі 
    # та кількість чисел, яку треба отримати в результаті. Функція генерує набір унікальних випадкових чисел
    # за допомогою модуля random та повертає список цих чисел. Функція включає перевірку введених параметрів 
    # та унікальності отриманого набору. В іншому випадку повертає пустий список Унікальність перевіряється
    # порівнянням отриманого списку з множиною отриманого набору елементів..
    # """
#     if quantity > max_num - min_num + 1 or min_num < 1 or max_num > 1000:
#         return []

#     nums = choices(range(min_num, max_num+1), k=quantity)

#     if len(nums) != len(set(nums)):
#         return []
    
#     return sorted(nums)


# print(get_numbers_ticket(1, 20, 6))

#--------------------
# """Варіант 3: З random.sample(). Перевірка на унікальність не потрібна оскільки sample 
# завжди повертає набір унікальних елементів."""

# def get_numbers_ticket(min_num: int, max_num: int, quantity: int) -> list:
    # """У якості параметрів функція отримує 3 числа: мінімальне та максимальне значення у наборі 
    # та кількість чисел, яку треба отримати в результаті. Функція генерує набір унікальних випадкових чисел
    # за допомогою модуля random та повертає список цих чисел. Функція включає перевірку введених параметрів. 
    # В іншому випадку повертає пустий список. Унікальность отриманого набору досягається через використання
    # методу random.sample()
    # """
#     num_lst = []

#     if quantity > max_num - min_num + 1 or min_num < 1 or max_num > 1000:
#         return []
    
#     num_lst = sample([num for num in range(min_num, max_num+1)], k=quantity)
    
#     return sorted(num_lst)


# print(get_numbers_ticket(1, 100, 6))
# print(get_numbers_ticket(1, 20, 3))

#------------------------
# """Варіант 4: З множиною."""

# def get_numbers_ticket(min_num: int, max_num: int, quantity: int) -> list:
    # """У якості параметрів функція отримує 3 числа: мінімальне та максимальне значення у наборі 
    # та кількість чисел, яку треба отримати в результаті. Функція повертає список цих чисел.
    # Набір унікальних випадкових чисел генерується за допомогою модуля random та множини. Функція включає 
    # перевірку введених параметрів та унікальності отриманого набору. В іншому випадку повертає пустий список. 
    # Унікальність перевіряється через порівняння кількості елементів отриманої множини із 
    # введеним параметром кількості.
    # """
#     if quantity > max_num - min_num + 1 or min_num < 1 or max_num > 1000:
#         return []
    
#     num_set = set()

#     for i in range(quantity):
#         num = randint(min_num, max_num)
#         num_set.add(num)

#     if len(num_set) != quantity:     #перевірка на унікальність елементів
#         return []
    
#     return sorted(list(num_set))

# print(get_numbers_ticket(1, 20, 4))


#-------------------------------

# """Варіант 5: З множиною. Перевірка на унікальність в даному випадку не потрібна."""

# def get_numbers_ticket(min_num: int, max_num: int, quantity: int) -> list:
    # """У якості параметрів функція отримує 3 числа: мінімальне та максимальне значення у наборі 
    # та кількість чисел, яку треба отримати в результаті. Функція повертає список цих чисел.
    # Набір унікальних випадкових чисел генерується за допомогою циклу while та множини. Функція включає 
    # перевірку введених параметрів. В іншому випадку повертає пустий список. 
    # Унікальність отриманого набору досягається через використання циклу while.
    # """
#     if quantity > max_num - min_num + 1 or min_num < 1 or max_num > 1000:
#         return []
    
#     num_set = set()

#     while len(num_set) != quantity:
#         num = randint(min_num, max_num)
#         num_set.add(num)

#     return sorted(list(num_set))


# print(get_numbers_ticket(1, 7, 3))